<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="format1.css" type="text/css">
<title>UDP</title>
</head>
<body style="background-color:white;">
<div id="container" style="width:80%;margin-left:auto;margin-right:auto;">
<h1 style="font-weight:900;text-align:center;">User Datagram Protocol<br/>(UDP)</h1>
<hr style="color:black;">
<h2>User Datagram Protocol (UDP)</h2>
<p style="font-family:times new roman, times,serif;font-weight:normal;">
The User Datagram Protocol (UDP) is a transport layer protocol defined for use with the IP network layer protocol. It is defined by RFC 768 written by John Postel. It provides a best-effort datagram service to an End System (IP host).</p> 

<p style="font-family:times new roman, times,serif;font-weight:normal;">
The service provided by UDP is an unreliable service that provides no guarantees for delivery and no protection from duplication (e.g. if this arises due to software errors within an Intermediate System (IS)). The simplicity of UDP reduces the overhead from using the protocol and the services may be adequate in many cases. </p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
UDP provides a minimal, unreliable, best-effort, message-passing transport to applications and upper-layer protocols. Compared to other transport protocols, UDP and its UDP-Lite variant are unique in that they do not establish end-to-end connections between communicating end systems. UDP communication consequently does not incur connection establishment and teardown overheads and there is minimal associated end system state. Because of these characteristics, UDP can offer a very efficient communication transport to some applications, but has no inherent congestion control or reliability. A second unique characteristic of UDP is that it provides no inherent On many platforms, applications can send UDP datagrams at the line rate of the link interface, which is often much greater than the available path capacity, and doing so would contribute to congestion along the path, applications therefore need to be designed responsibly [RFC 4505].</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
One increasingly popular use of UDP is as a tunneling protocol, where a tunnel endpoint encapsulates the packets of another protocol inside UDP datagrams and transmits them to another tunnel endpoint, which decapsulates the UDP datagrams and forwards the original packets contained in the payload. Tunnels establish virtual links that appear to directly connect locations that are distant in the physical Internet topology, and can be used to create virtual (private) networks. Using UDP as a tunneling protocol is attractive when the payload protocol is not supported by middleboxes that may exist along the path, because many middleboxes support UDP transmissions.</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
UDP does not provide any communications security. Applications that need to protect their communications against eavesdropping, tampering, or message forgery therefore need to separately provide security services using additional protocol mechanisms.</p>

<h3>Protocol Header</h3>
<p style="font-family:times new roman, times,serif;font-weight:normal;">
A computer may send UDP packets without first establishing a connection to the recipient. A UDP datagram is carried in a single IP packet and is hence limited to a maximum payload of 65,507 bytes for IPv4 and 65,527 bytes for IPv6. The transmission of large IP packets usually requires IP fragmentation. Fragmentation decreases communication reliability and efficiency and should theerfore be avoided.</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
To transmit a UDP datagram, a computer completes the appropriate fields in the UDP header (PCI) and forwards the data together with the header for transmission by the IP network layer.</p>
<pre>
    0      7 8     15 16    23 24    31
   +--------+--------+--------+--------+
   |     Source      |   Destination   |
   |      Port       |      Port       |
   +--------+--------+--------+--------+
   |                 |                 |
   |     Length      |    Checksum     |
   +--------+--------+--------+--------+
   |
   |          data octets ...
   +---------------- ...
   </pre>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
The UDP header consists of four fields each of 2 bytes in length:</p>

<ul style="font-weight:bold;">
<li>Source Port <p style="font-family:times new roman, times,serif;font-weight:normal;">(UDP packets from a client use this as a service access point (SAP) to indicate the session on the local client that originated the packet. UDP packets from a server carry the server SAP in this field)
</p></li> 

<li>Destination Port <p style="font-family:times new roman, times,serif;font-weight:normal;"> (UDP packets from a client use this as a service access point (SAP) to indicate the service required from the remote server. UDP packets from a server carry the client SAP in this field) 
</p></li>

<li>UDP length <p style="font-family:times new roman, times,serif;font-weight:normal;"> (The number of bytes comprising the combined UDP header information and payload data)
</p></li>
 
<li>UDP Checksum <p style="font-family:times new roman, times,serif;font-weight:normal;">(A checksum to verify that the end to end data has not been corrupted by routers or bridges in the network or by the processing in an end system. The algorithm to compute the checksum is the Standard Internet Checksum algorithm. This allows the receiver to verify that it was the intended destination of the packet, because it covers the IP addresses, port numbers and protocol number, and it verifies that the packet is not truncated or padded, because it covers the size field. Therefore, this protects an application against receiving corrupted payload data in place of, or in addition to, the data that was sent. In the cases where this check is not required, the value of 0x0000 is placed in this field, in which case the data is not checked by the receiver.
</p></li>
</ul>

<p style="font-family:times new roman, times,serif;font-weight:normal;"> 
Like for other transport protocols, the UDP header and data are not processed by Intermediate Systems (IS) in the network, and are delivered to the final destination in the same form as originally transmitted.</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
At the final destination, the UDP protocol layer receives packets from the IP network layer. These are checked using the checksum (when >0, this checks correct end-to-end operation of the network service) and all invalid PDUs are discarded. UDP does not make any provision for error reporting if the packets are not delivered. Valid data are passed to the appropriate session layer protocol identified by the source and destination port numbers (i.e. the session service access points).</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
UDP and UDP-Lite also may be used for multicast and broadcast, allowing senders to transmit to multiple receivers.</p>

<h3>Using UDP</h3>
<p style="font-family:times new roman, times,serif;font-weight:normal;">
Application designers are generally aware that UDP does not provide any reliability, e.g., it does not retransmit any lost packets. Often, this is a main reason to consider UDP as a transport. Applications that do require reliable message delivery therefore need to implement appropriate protocol mechanisms in their applications (e.g. tftp).</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
UDP's best effort service does not protect against datagram duplication, i.e., an application may receive multiple copies of the same UDP datagram. Application designers therefore need to verify that their application gracefully handles datagram duplication and may need to implement mechanisms to detect duplicates.</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
The Internet may also significantly delay some packets with respect to others, e.g., due to routing transients, intermittent connectivity, or mobility. This can cause reordering, where UDP datagrams arrive at the receiver in an order different from the transmission order. Applications that require ordered delivery must restore datagram ordering themselves.</p>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
The burdon of needing to code all these protocol mechanims can be avoided by using TCP!</p>

<h3>Ports</h3>
<p style="font-family:times new roman, times,serif;font-weight:normal;">
Generally, clients set the source port number to a unique number that they choose themselves - usually based on the program that started the connection. Since this number is returned by the server in responses, this lets the sender know which "conversation" incoming packets are to be sent to. The destination port of packets sent by the client is usually set to one of a number of well-known ports. These usually correspond to one of a number of different applications, e.g. port 23 is used for telnet, and port 80 is used for web servers.</p> 

<p style="font-family:times new roman, times,serif;font-weight:normal;">
A server process (program), listens for UDP packets received with a particular well-known port number and tells its local UDP layer to send packets matching this destination port number to the server program. It determines which client these packets come from by examining the received IP source address and the received unique UDP source port number. Any responses which the server needs to send to back to a client are sent with the source port number of the server (the well-known port number) and the destination port selected by the client. Most people do not memorise the well known ports, instead they look them up in table</p>

<ul style="font-weight:bold;">
<li>20 FTP-DATA File Transfer [Default Data]</li>
<li>21 FTP File Transfer [Control]</li>
<li>23 TELNET Telnet</li>
<li>25 SMTP Simple Mail Transfer</li>
<li>37 TIME Time</li>
<li>69 TFTP Trivial File Transfer</li>
<li>79 FINGER Finger</li>
<li>110 POP3 Post Office Protocol v 3</li>
<li>123 NTP Network Time Protocol</li>
<li>143 IMAP2 Interim Mail Access Prot. v2</li>
<li>161 SNMP Simple Network Man. Prot.</li>
</ul>

<p style="font-family:times new roman, times,serif;font-weight:normal;">
If a client/server application executes on a host with more than one IP interface, the application needs to ensure that it sends any UDP responses with an IP source address that matches the IP destination address of the UDP datagram that carried the request.</p> 






<hr style="color:black;">
<a href="osinew.htm"><img src="Left%20Arrow.png" width="50" height=
"50" align="right" alt="Back"></a></div>
</body>
</html>